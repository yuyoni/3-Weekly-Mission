"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/camelcase";
exports.ids = ["vendor-chunks/camelcase"];
exports.modules = {

/***/ "(ssr)/./node_modules/camelcase/index.js":
/*!*****************************************!*\
  !*** ./node_modules/camelcase/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ camelCase)\n/* harmony export */ });\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\nconst LEADING_SEPARATORS = new RegExp(\"^\" + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, \"gu\");\nconst NUMBERS_AND_IDENTIFIER = new RegExp(\"\\\\d+\" + IDENTIFIER.source, \"gu\");\nconst preserveCamelCase = (string, toLowerCase, toUpperCase, preserveConsecutiveUppercase)=>{\n    let isLastCharLower = false;\n    let isLastCharUpper = false;\n    let isLastLastCharUpper = false;\n    let isLastLastCharPreserved = false;\n    for(let index = 0; index < string.length; index++){\n        const character = string[index];\n        isLastLastCharPreserved = index > 2 ? string[index - 3] === \"-\" : true;\n        if (isLastCharLower && UPPERCASE.test(character)) {\n            string = string.slice(0, index) + \"-\" + string.slice(index);\n            isLastCharLower = false;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = true;\n            index++;\n        } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character) && (!isLastLastCharPreserved || preserveConsecutiveUppercase)) {\n            string = string.slice(0, index - 1) + \"-\" + string.slice(index - 1);\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = false;\n            isLastCharLower = true;\n        } else {\n            isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n        }\n    }\n    return string;\n};\nconst preserveConsecutiveUppercase = (input, toLowerCase)=>{\n    LEADING_CAPITAL.lastIndex = 0;\n    return input.replaceAll(LEADING_CAPITAL, (match)=>toLowerCase(match));\n};\nconst postProcess = (input, toUpperCase)=>{\n    SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n    NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n    return input.replaceAll(NUMBERS_AND_IDENTIFIER, (match, pattern, offset)=>[\n            \"_\",\n            \"-\"\n        ].includes(input.charAt(offset + match.length)) ? match : toUpperCase(match)).replaceAll(SEPARATORS_AND_IDENTIFIER, (_, identifier)=>toUpperCase(identifier));\n};\nfunction camelCase(input, options) {\n    if (!(typeof input === \"string\" || Array.isArray(input))) {\n        throw new TypeError(\"Expected the input to be `string | string[]`\");\n    }\n    options = {\n        pascalCase: false,\n        preserveConsecutiveUppercase: false,\n        ...options\n    };\n    if (Array.isArray(input)) {\n        input = input.map((x)=>x.trim()).filter((x)=>x.length).join(\"-\");\n    } else {\n        input = input.trim();\n    }\n    if (input.length === 0) {\n        return \"\";\n    }\n    const toLowerCase = options.locale === false ? (string)=>string.toLowerCase() : (string)=>string.toLocaleLowerCase(options.locale);\n    const toUpperCase = options.locale === false ? (string)=>string.toUpperCase() : (string)=>string.toLocaleUpperCase(options.locale);\n    if (input.length === 1) {\n        if (SEPARATORS.test(input)) {\n            return \"\";\n        }\n        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n    }\n    const hasUpperCase = input !== toLowerCase(input);\n    if (hasUpperCase) {\n        input = preserveCamelCase(input, toLowerCase, toUpperCase, options.preserveConsecutiveUppercase);\n    }\n    input = input.replace(LEADING_SEPARATORS, \"\");\n    input = options.preserveConsecutiveUppercase ? preserveConsecutiveUppercase(input, toLowerCase) : toLowerCase(input);\n    if (options.pascalCase) {\n        input = toUpperCase(input.charAt(0)) + input.slice(1);\n    }\n    return postProcess(input, toUpperCase);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/camelcase/index.js\n");

/***/ })

};
;